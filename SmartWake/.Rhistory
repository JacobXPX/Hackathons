install.packages("lubridate")
shiny::runApp('ws/Competition/PSU/SmartWake')
runApp('ws/Competition/PSU/SmartWake')
runApp('ws/Competition/PSU/SmartWake')
runApp('ws/Competition/PSU/SmartWake')
jsonData <- fromJSON("http://apidev.accuweather.com/forecasts/v1/hourly/24hour/349727?apikey=PSUHackathon112016&details=true")
Data <- jsonData %>% select(DateTime, UVIndex)
datestring <- substr(Data$DateTime,1,19)
Data$DateTime <- strptime(datestring, "%Y-%m-%dT%H:%M:%S")
now <- Sys.time()
for (i in 2:nrow(Data)){
if (Data$UVIndex[i-1] == 0 && Data$UVIndex[i] > 0){
sunrise <- i-1
}
if (Data$UVIndex[i-1] > 0 && Data$UVIndex[i] == 0){
sunset <- i
}
}
t0 <- Data$DateTime[sunrise]
t1 <- Data$DateTime[sunset]
d <- yday(Data$DateTime[sunrise])/365
beta0 <- 1.0531
beta1 <- 17.7151
beta2 <- -18.307
s_bar <- beta0 + beta1 *d + beta2 *d^2
mu <- 6*s_bar / (hour(t1) -hour(t0))^2
c <- 1.5*s_bar
t <- (hour(t1) + hour(t0))/2
t
t1
t2
t0
runApp('ws/Competition/PSU/SmartWake')
runApp('ws/Competition/PSU/SmartWake')
install.packages("curl")
install.packages("tm")
install.packages("stringr")
install.packages("stylo")
install.packages("grid")
install.packages("jsonlite")
shiny::runApp('ws/Competition/PSU/SmartWake')
install.packages("curl")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
library(dplyr)
library(lubridate)
jsonData <- fromJSON("http://apidev.accuweather.com/forecasts/v1/hourly/72hour/349727?apikey=PSUHackathon112016&details=true")
names(jsonData)
Data <- jsonData %>% select(DateTime, UVIndex)
Data
runApp()
library(jsonlite)
library(dplyr)
library(lubridate)
jsonData <- fromJSON("http://apidev.accuweather.com/forecasts/v1/hourly/72hour/349727?apikey=PSUHackathon112016&details=true")
names(jsonData)
Data <- jsonData %>% select(DateTime, UVIndex)
Data
datestring <- substr(Data$DateTime,1,19)
Data$DateTime <- strptime(datestring, "%Y-%m-%dT%H:%M:%S")
for (i in 2:nrow(Data)){
if (Data$UVIndex[i-1] == 0 && Data$UVIndex[i] > 0){
sunrise <- i-1
break
}}
for (i in sunrise:nrow(Data)){
if (Data$UVIndex[i-1] > 0 && Data$UVIndex[i] == 0){
sunset <- i
break
}
}
for (i in 2:nrow(Data)){
if (Data$UVIndex[i-1] == 0 && Data$UVIndex[i] > 0){
sunrise <- i-1
break
}}
for (i in 5:nrow(Data)){
if (Data$UVIndex[i-1] == 0 && Data$UVIndex[i] > 0){
sunrise <- i-2
break
}}
for (i in sunrise:nrow(Data)){
if (Data$UVIndex[i-1] > 0 && Data$UVIndex[i] == 0){
sunset <- i
break
}
}
t0 <- Data$DateTime[sunrise]
t1 <- Data$DateTime[sunset]
d <- yday(Data$DateTime[sunrise])/365
beta0 <- 1.0531
beta1 <- 17.7151
beta2 <- -18.307
s_bar <- beta0 + beta1 *d + beta2 *d^2
c <- s_bar + as.numeric(t1-t0)/24
t <- (hour(t1) + hour(t0))/2 - sqrt(c/2)
midnight  <- as.POSIXct(trunc(t0, units="days"))
t <- midnight + (3600*t)
t
runApp()
strptime("10:00:00", "%T") +24
strptime("10:00:00", "%T")
strptime("10:00:00", "%T") +24*3600
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
now <- Sys.time()
now
now-strptime("23:00:00", "%T")
now
now +60
now + 6 *60*60
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
